#pragma rtGlobals=3		// Use modern global access method and strict wave access.

function OS_LoadScanImage(zoom,nChannels)
variable zoom, nChannels
// call the function and tell it the zoom (e.g. 1) and number of channels (e.g. 2 or 3)

variable lineduration = 0.001 // = 1 ms
variable FOV_at_zoom065 = 665.6/0.65 // full image size at zoom 0.65.
// this depends on the microscope and objective used.

ImageLoad /Q /O /C=-1 // load the actual tiff

Variable PointPos = strsearch(S_Wavenames, ";", 0)
String FirstWave =S_Wavenames[0,PointPos-1]

duplicate /o $FirstWave InputData //
killwaves $FirstWave

if (nChannels==1)
	duplicate /o InputData wDataCh0 // if just one channel then name input wDataCh0

elseif (nChannels>1)
	// if more than 1 channel, need to deinterleave
	variable nX = Dimsize(InputData,0)
	variable nY = Dimsize(InputData,1)
	variable nF = Dimsize(InputData,2)/nChannels		
	variable ff
	
	if (nChannels == 2)
		 // if 2 channels
		// now assume that Ch1 is data and Ch2 stimulus
		make /o/n=(nX,nY,nF) wDataCh0 = NaN // setup data channel
		make /o/n=(nX,nY,nF) wDataCh2 = NaN	// setup trigger channel
		for (ff=0;ff<nF;ff+=1)
			Multithread wDataCh0[][][ff]=InputData[p][q][ff*2]
			Multithread wDataCh2[][][ff]=InputData[p][q][ff*2+1]
		endfor
		wDataCh2*=-1 // invert trigger channel
		wDataCh2+=2^16		

	elseif (nChannels==3) // if 3 channels
		// now assume that Ch1 and 2 is data (red, green) and Ch3 is stimulus
		make /o/n=(nX,nY,nF) wDataCh0 = NaN // setup data channel 1 (green)
		make /o/n=(nX,nY,nF) wDataCh1 = NaN // setup data channel	2 (red)
		make /o/n=(nX,nY,nF) wDataCh2 = NaN	// setup trigger channel
		for (ff=0;ff<nF;ff+=1)
			Multithread wDataCh0[][][ff]=InputData[p][q][ff*3]
			Multithread wDataCh1[][][ff]=InputData[p][q][ff*3+1]
			Multithread wDataCh2[][][ff]=InputData[p][q][ff*3+2]
		endfor
		wDataCh2*=-1 // invert trigger channel
		wDataCh2+=2^16		
	endif

endif

killwaves InputData	


// Set up the parameter table and modify it to work with manually entered ScanImage info
make /o/n=(100) wParamsNum = NaN // Sets up a "ScanM-like header"
wParamsNum[30] = Zoom // overwrite the zoom entry

OS_ParameterTable() // make the table
wave OS_parameters // this gets generated by the above function
variable linedurposition = FindDimLabel(OS_Parameters,0,"LineDuration" )
OS_Parameters[linedurposition] = lineduration // overwrite the line duration entry
variable FOVentry = FindDimLabel(OS_Parameters,0,"FOV_at_zoom065" )
OS_Parameters[FOVentry] = FOV_at_zoom065 // overwrite the absolute scaling entry







end